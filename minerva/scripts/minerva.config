
# CUDA Knobs

## Allow use of CUDA-accelerated sparse matrix operations
CudaBlockSparseMatrix::Enable=0
CudaBlockSparseMatrix::UseCudaRandomLibrary=0

## Allow use of CUDA-accelerated dense matrix operations
CublasMatrix::Enable=0

## Use blocking kernel launches
CudaSparseMatrixLibrary::UseBlockingKernelLaunches=0

# Classifer Knobs

## Slice out tiles of the input images to train on (rather than downsampling)
ClassifierEngine::SliceInputImagesToFitNetwork=1

## How many layers to train simultaneously using an autoencoder
UnsupervisedLearnerEngine::LayersPerIteration=3

## Image Batch Size
ClassifierEngine::ImageBatchSize=50

# Optimizer Knobs

## Determine the algorithm for general differentiable optimization (LBFGSSolver, GradientDescentSolver)
GeneralDifferentiableSolver::Type=LBFGSSolver
#LBFGSSolver
#GradientDescentSolver


# Neural Network Knobs

## Randoms
NeuralNetwork::SeedWithTime=1

## Visualization
NeuronVisualizer::InputRange=0.001
NeuronVisualizer::SolverClass=Differentiable
NeuronVisualizer::SolverType=LBFGSSolver

## Back prop
BackPropagation::Type=DenseBackPropagation

## Set the parameters for sparse back prop
NeuralNetwork::Lambda=0.0001
NeuralNetwork::Sparsity=0.01
NeuralNetwork::SparsityWeight=3.00



